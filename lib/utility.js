/*--------------------------------------------------------------------------------------------------------------------*/

let _cnt = 0;

const _paramRegExp = new RegExp('-\\W*([a-zA-Z][a-zA-Z0-9]*)\\W*=\\W*\\?', 'g');

const _responseRegExp = new RegExp('AMI-RESPONSE<([0-9]+),(true|false)>(.*)', 's');

/*--------------------------------------------------------------------------------------------------------------------*/

function buildCommandMessage(uuid, serverName, command, options)
{
	options = options || {};

	/*----------------------------------------------------------------------------------------------------------------*/

	const token = _cnt++;

	/*----------------------------------------------------------------------------------------------------------------*/

	const params = options.params || [];

	/*----------------------------------------------------------------------------------------------------------------*/

	const converter = ('converter' in options) ? (options.converter || '') : 'AMIXmlToJson.xsl';

	/*----------------------------------------------------------------------------------------------------------------*/

	command = (command || '').trim().replace(_paramRegExp, (x, y) => {

		return `-${y}="${String(params.shift()).replace('\\', '\\\\').replace('\n', '\\n').replace('"', '\\"').replace('\'', '\\\'')}"`;
	});

	/*----------------------------------------------------------------------------------------------------------------*/

	const topic = `ami/${serverName}/command/${converter}`;

	const message = `AMI-COMMAND<${token},"${uuid}","node-red">${command}`;

	/*----------------------------------------------------------------------------------------------------------------*/

	return {
		token: token,
		topic: topic,
		payload: message,
	};

	/*----------------------------------------------------------------------------------------------------------------*/
}

/*--------------------------------------------------------------------------------------------------------------------*/

function readCommandResult(L, topic, payload)
{
	if(topic === 'command-return')
	{
		const m = payload.match(_responseRegExp);

		if(m)
		{
			/*--------------------------------------------------------------------------------------------------------*/
			/* AMI COMMAND RESULT MESSAGE                                                                             */
			/*--------------------------------------------------------------------------------------------------------*/

			const token = parseInt(m[1]);

			const json = /*----*/(m[2]);

			const data = /*---*/(m[3]);

			/*--------------------------------------------------------------------------------------------------------*/

			if(token in L)
			{
				delete L[token];

				return {
					json: json === 'true',
					data: data,
				};
			}

			/*--------------------------------------------------------------------------------------------------------*/
		}
	}

	return null;
}

/*--------------------------------------------------------------------------------------------------------------------*/

module.exports = {
	buildCommandMessage: buildCommandMessage,
	readCommandResult: readCommandResult,
};

/*--------------------------------------------------------------------------------------------------------------------*/
