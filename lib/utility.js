/*--------------------------------------------------------------------------------------------------------------------*/

let _cnt = 0;

const _paramRegExp = new RegExp('-\\W*([a-zA-Z][a-zA-Z0-9]*)\\W*=\\W*\\?', 'g');

const _responseRegExp = new RegExp('AMI-RESPONSE<([0-9]+),(true|false)>(.*)', 's');

/*--------------------------------------------------------------------------------------------------------------------*/

function getToken()
{
	return _cnt++;
}

/*--------------------------------------------------------------------------------------------------------------------*/

function buildCommandMessage(token, uuid, serverName, command, options)
{
	options = options || {};

	/*----------------------------------------------------------------------------------------------------------------*/

	const params = options.params || [];

	/*----------------------------------------------------------------------------------------------------------------*/

	const converter = ('converter' in options) ? (options.converter || '') : 'AMIXmlToJson.xsl';

	/*----------------------------------------------------------------------------------------------------------------*/

	command = (command || '').trim().replace(_paramRegExp, (x, y) => {

		return `-${y}="${String(params.shift()).replace('\\', '\\\\').replace('\n', '\\n').replace('"', '\\"').replace('\'', '\\\'')}"`;
	});

	/*----------------------------------------------------------------------------------------------------------------*/

	const topic = `ami/${serverName}/command/${converter}`;

	const message = `AMI-COMMAND<${token},"${uuid}","node-red">${command}`;

	/*----------------------------------------------------------------------------------------------------------------*/

	return {
		topic: topic,
		payload: message,
	};

	/*----------------------------------------------------------------------------------------------------------------*/
}

/*--------------------------------------------------------------------------------------------------------------------*/

function readCommandResult(L, payload)
{
	const m = payload.match(_responseRegExp);

	if(m)
	{
		/*--------------------------------------------------------------------------------------------------------*/
		/* AMI COMMAND RESULT MESSAGE                                                                             */
		/*--------------------------------------------------------------------------------------------------------*/

		const token = parseInt(m[1]);

		const json = /*----*/(m[2]);

		const data = /*---*/(m[3]);

		/*--------------------------------------------------------------------------------------------------------*/

		if(token in L)
		{
			const node = L[token];

			delete L[token];

			return {
				node: node,
				json: json === 'true',
				data: data,
			};
		}

		/*--------------------------------------------------------------------------------------------------------*/
	}

	return null;
}

/*--------------------------------------------------------------------------------------------------------------------*/

function readTaskResult(M, payload)
{
	try
	{
		/*------------------------------------------------------------------------------------------------------------*/

		const data = JSON.parse(payload);

		const token = data.task_name;

		/*------------------------------------------------------------------------------------------------------------*/

		if(token in M)
		{
			const node = M[token];

			if(data.state === "FINISHED")
			{
				delete M[token];
			}

			return {
				node: node,
				json: /**/ true /**/,
				data: data,
			};
		}

		/*------------------------------------------------------------------------------------------------------------*/
	}
	catch(e)
	{
		return null;
	}

	return null;
}

/*--------------------------------------------------------------------------------------------------------------------*/

module.exports = {
	getToken: getToken,
	buildCommandMessage: buildCommandMessage,
	readCommandResult: readCommandResult,
	readTaskResult: readTaskResult,
};

/*--------------------------------------------------------------------------------------------------------------------*/
